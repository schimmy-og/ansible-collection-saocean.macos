---
# tasks file for role_container_runtime

- name: Get podman binary path
  ansible.builtin.command: "which podman"
  register: podman_path
  changed_when: false

- name: Temporarily Overwrite homebrew_user variable with the user
  ansible.builtin.set_fact:
    homebrew_user: "{{ ansible_user_id }}"
    homebrew_group: "{{ ansible_user_gid }}"

- name: "Create a symbolic link for docker to podman - MUST USE BECOME"
  ansible.builtin.file:
    src: "{{ podman_path.stdout }}"
    dest: "{{ docker_path }}"
    owner: "{{ homebrew_user }}"
    state: link
  become: true
  when: docker.runtime is defined and docker.runtime == "podman"

- name: Unset Homebrew ownership variables
  ansible.builtin.set_fact:
    homebrew_user: null
    homebrew_group: null

- name: Reset Homebrew ownership variables
  ansible.builtin.set_fact:
    homebrew_user: '{{ homebrew_user | default(ansible_user_id) }}'
    homebrew_group: '{{ homebrew_group | default(ansible_user_gid) }}'

- name: "Check if there is a PodMan Machine"
  ansible.builtin.command: podman machine list --format json
  changed_when: false
  register: podman_machine_list

- name: "Initialize PodMan Machine if it doesn't Exist"
  ansible.builtin.command: "podman machine init {{ podman_machine.name }} --cpus={{ podman_machine.cpus }} --memory={{ podman_machine.memory_mb }}"
  when: not podman_machine_list.stdout | from_json | json_query('[? Name==`' + podman_machine.name + '`]') | length == 1
  poll: 5
  async: 1200

- name: "Set FACT for containing PodMan Machine Info if exists"
  ansible.builtin.set_fact:
    podman_machine_info: "{{ podman_machine_list.stdout | from_json | json_query('[? Name==`' + podman_machine.name + '`]') }}"
  when: podman_machine_list.stdout | from_json | json_query('[? Name==`' + podman_machine.name + '`]') | length == 1

- name: "Set PodMan Machine CPUs"
  ansible.builtin.command: "podman machine set --cpus={{ podman_machine.cpus }}"
  when:
    - (podman_machine_info is defined)
    - (podman_machine_info | json_query('[*].CPUs') | first != podman_machine.cpus)

- name: "Set PodMan Machine Memory"
  ansible.builtin.command: "podman machine set --memory={{ podman_machine.memory_mb }}"
  when:
   - (podman_machine_info is defined)
   - (podman_machine_info | json_query('[*].Memory') | first | int) != (podman_machine.memory_mb | human_to_bytes(default_unit='M') | int)

- name: "Check PodMan Version"
  ansible.builtin.shell:
    cmd: podman --version | awk '{print $3}'
  changed_when: false
  register: podman_version

- name: "Install PodMan Mac Helper - HomeBrew Install Path - MUST USE BECOME"
  ansible.builtin.command: >
    /opt/homebrew/Cellar/podman/{{ podman_version.stdout }}/bin/podman-mac-helper install
  become: true
  become_method: sudo
  register: podman_mac_helper_status
  changed_when: >
    not podman_mac_helper_status is search('helper is already installed, skipping the install, uninstall first if you want to reinstall')
  when: podman_path.stdout == "/opt/homebrew/bin/podman"

- name: "Install PodMan Mac Helper - Standard Install Path - MUST USE BECOME"
  ansible.builtin.command: >
    /usr/local/bin/podman-mac-helper install
  become: true
  become_method: sudo
  register: podman_mac_helper_status
  changed_when: >
    not podman_mac_helper_status is search('helper is already installed, skipping the install, uninstall first if you want to reinstall')
  when: podman_path.stdout == "/usr/local/bin/podman"
